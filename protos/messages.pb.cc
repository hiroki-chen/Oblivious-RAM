// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace oram_impl {
PROTOBUF_CONSTEXPR RequestHeader::RequestHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instance_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHeaderDefaultTypeInternal() {}
  union {
    RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
PROTOBUF_CONSTEXPR PrintOramTreeRequest::PrintOramTreeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrintOramTreeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrintOramTreeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrintOramTreeRequestDefaultTypeInternal() {}
  union {
    PrintOramTreeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrintOramTreeRequestDefaultTypeInternal _PrintOramTreeRequest_default_instance_;
PROTOBUF_CONSTEXPR HelloMessage::HelloMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloMessageDefaultTypeInternal() {}
  union {
    HelloMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
PROTOBUF_CONSTEXPR KeyExchangeRequest::KeyExchangeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_client_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangeRequestDefaultTypeInternal() {}
  union {
    KeyExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangeRequestDefaultTypeInternal _KeyExchangeRequest_default_instance_;
PROTOBUF_CONSTEXPR KeyExchangeResponse::KeyExchangeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_server_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangeResponseDefaultTypeInternal() {}
  union {
    KeyExchangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangeResponseDefaultTypeInternal _KeyExchangeResponse_default_instance_;
PROTOBUF_CONSTEXPR InitFlatOramRequest::InitFlatOramRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.capacity_)*/0u
  , /*decltype(_impl_.block_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitFlatOramRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitFlatOramRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitFlatOramRequestDefaultTypeInternal() {}
  union {
    InitFlatOramRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitFlatOramRequestDefaultTypeInternal _InitFlatOramRequest_default_instance_;
PROTOBUF_CONSTEXPR FlatVectorMessage::FlatVectorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlatVectorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlatVectorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlatVectorMessageDefaultTypeInternal() {}
  union {
    FlatVectorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlatVectorMessageDefaultTypeInternal _FlatVectorMessage_default_instance_;
PROTOBUF_CONSTEXPR InitTreeOramRequest::InitTreeOramRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.bucket_size_)*/0u
  , /*decltype(_impl_.bucket_num_)*/0u
  , /*decltype(_impl_.block_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitTreeOramRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitTreeOramRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitTreeOramRequestDefaultTypeInternal() {}
  union {
    InitTreeOramRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitTreeOramRequestDefaultTypeInternal _InitTreeOramRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadFlatRequest::ReadFlatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadFlatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadFlatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadFlatRequestDefaultTypeInternal() {}
  union {
    ReadFlatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadFlatRequestDefaultTypeInternal _ReadFlatRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadPathRequest::ReadPathRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.path_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadPathRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadPathRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadPathRequestDefaultTypeInternal() {}
  union {
    ReadPathRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadPathRequestDefaultTypeInternal _ReadPathRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadPathResponse::ReadPathResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadPathResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadPathResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadPathResponseDefaultTypeInternal() {}
  union {
    ReadPathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadPathResponseDefaultTypeInternal _ReadPathResponse_default_instance_;
PROTOBUF_CONSTEXPR WritePathRequest::WritePathRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bucket_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.path_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.offset_)*/0u} {}
struct WritePathRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WritePathRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WritePathRequestDefaultTypeInternal() {}
  union {
    WritePathRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WritePathRequestDefaultTypeInternal _WritePathRequest_default_instance_;
PROTOBUF_CONSTEXPR WritePathResponse::WritePathResponse(
    ::_pbi::ConstantInitialized) {}
struct WritePathResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WritePathResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WritePathResponseDefaultTypeInternal() {}
  union {
    WritePathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WritePathResponseDefaultTypeInternal _WritePathResponse_default_instance_;
}  // namespace oram_impl
static ::_pb::Metadata file_level_metadata_messages_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::RequestHeader, _impl_.instance_hash_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::RequestHeader, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::RequestHeader, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::PrintOramTreeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::PrintOramTreeRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::HelloMessage, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::HelloMessage, _impl_.iv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::KeyExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::KeyExchangeRequest, _impl_.public_key_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::KeyExchangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::KeyExchangeResponse, _impl_.public_key_server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitFlatOramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitFlatOramRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitFlatOramRequest, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitFlatOramRequest, _impl_.block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::FlatVectorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::FlatVectorMessage, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::FlatVectorMessage, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitTreeOramRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitTreeOramRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitTreeOramRequest, _impl_.bucket_size_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitTreeOramRequest, _impl_.bucket_num_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::InitTreeOramRequest, _impl_.block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadFlatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadFlatRequest, _impl_.header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathRequest, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathRequest, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::ReadPathResponse, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathRequest, _impl_.offset_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oram_impl::WritePathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::oram_impl::RequestHeader)},
  { 9, -1, -1, sizeof(::oram_impl::PrintOramTreeRequest)},
  { 16, -1, -1, sizeof(::oram_impl::HelloMessage)},
  { 24, -1, -1, sizeof(::oram_impl::KeyExchangeRequest)},
  { 31, -1, -1, sizeof(::oram_impl::KeyExchangeResponse)},
  { 38, -1, -1, sizeof(::oram_impl::InitFlatOramRequest)},
  { 47, -1, -1, sizeof(::oram_impl::FlatVectorMessage)},
  { 55, -1, -1, sizeof(::oram_impl::InitTreeOramRequest)},
  { 65, -1, -1, sizeof(::oram_impl::ReadFlatRequest)},
  { 72, -1, -1, sizeof(::oram_impl::ReadPathRequest)},
  { 81, -1, -1, sizeof(::oram_impl::ReadPathResponse)},
  { 88, 100, -1, sizeof(::oram_impl::WritePathRequest)},
  { 106, -1, -1, sizeof(::oram_impl::WritePathResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::oram_impl::_RequestHeader_default_instance_._instance,
  &::oram_impl::_PrintOramTreeRequest_default_instance_._instance,
  &::oram_impl::_HelloMessage_default_instance_._instance,
  &::oram_impl::_KeyExchangeRequest_default_instance_._instance,
  &::oram_impl::_KeyExchangeResponse_default_instance_._instance,
  &::oram_impl::_InitFlatOramRequest_default_instance_._instance,
  &::oram_impl::_FlatVectorMessage_default_instance_._instance,
  &::oram_impl::_InitTreeOramRequest_default_instance_._instance,
  &::oram_impl::_ReadFlatRequest_default_instance_._instance,
  &::oram_impl::_ReadPathRequest_default_instance_._instance,
  &::oram_impl::_ReadPathResponse_default_instance_._instance,
  &::oram_impl::_WritePathRequest_default_instance_._instance,
  &::oram_impl::_WritePathResponse_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\toram_impl\032\033google/prot"
  "obuf/empty.proto\"C\n\rRequestHeader\022\025\n\rins"
  "tance_hash\030\001 \001(\014\022\017\n\007version\030\002 \001(\014\022\n\n\002id\030"
  "\003 \001(\r\"\"\n\024PrintOramTreeRequest\022\n\n\002id\030\001 \001("
  "\r\"+\n\014HelloMessage\022\017\n\007content\030\001 \001(\014\022\n\n\002iv"
  "\030\002 \001(\014\"/\n\022KeyExchangeRequest\022\031\n\021public_k"
  "ey_client\030\001 \001(\014\"0\n\023KeyExchangeResponse\022\031"
  "\n\021public_key_server\030\001 \001(\014\"e\n\023InitFlatOra"
  "mRequest\022(\n\006header\030\001 \001(\0132\030.oram_impl.Req"
  "uestHeader\022\020\n\010capacity\030\002 \001(\r\022\022\n\nblock_si"
  "ze\030\003 \001(\r\"N\n\021FlatVectorMessage\022(\n\006header\030"
  "\001 \001(\0132\030.oram_impl.RequestHeader\022\017\n\007conte"
  "nt\030\002 \001(\014\"|\n\023InitTreeOramRequest\022(\n\006heade"
  "r\030\001 \001(\0132\030.oram_impl.RequestHeader\022\023\n\013buc"
  "ket_size\030\002 \001(\r\022\022\n\nbucket_num\030\003 \001(\r\022\022\n\nbl"
  "ock_size\030\004 \001(\r\";\n\017ReadFlatRequest\022(\n\006hea"
  "der\030\001 \001(\0132\030.oram_impl.RequestHeader\"X\n\017R"
  "eadPathRequest\022(\n\006header\030\001 \001(\0132\030.oram_im"
  "pl.RequestHeader\022\014\n\004path\030\002 \001(\r\022\r\n\005level\030"
  "\003 \001(\r\"\"\n\020ReadPathResponse\022\016\n\006bucket\030\001 \003("
  "\014\"\266\001\n\020WritePathRequest\022(\n\006header\030\001 \001(\0132\030"
  ".oram_impl.RequestHeader\022\014\n\004path\030\002 \001(\r\022\r"
  "\n\005level\030\003 \001(\r\022\016\n\006bucket\030\004 \003(\014\022\"\n\004type\030\005 "
  "\001(\0162\017.oram_impl.TypeH\000\210\001\001\022\023\n\006offset\030\006 \001("
  "\rH\001\210\001\001B\007\n\005_typeB\t\n\007_offset\"\023\n\021WritePathR"
  "esponse*<\n\004Type\022\017\n\013kSequential\020\000\022\013\n\007kRan"
  "dom\020\001\022\t\n\005kInit\020\002\022\013\n\007kNormal\020\0032\372\006\n\013oram_s"
  "erver\022H\n\014InitTreeOram\022\036.oram_impl.InitTr"
  "eeOramRequest\032\026.google.protobuf.Empty\"\000\022"
  "H\n\014InitFlatOram\022\036.oram_impl.InitFlatOram"
  "Request\032\026.google.protobuf.Empty\"\000\022J\n\rPri"
  "ntOramTree\022\037.oram_impl.PrintOramTreeRequ"
  "est\032\026.google.protobuf.Empty\"\000\022E\n\010ReadPat"
  "h\022\032.oram_impl.ReadPathRequest\032\033.oram_imp"
  "l.ReadPathResponse\"\000\022H\n\tWritePath\022\033.oram"
  "_impl.WritePathRequest\032\034.oram_impl.Write"
  "PathResponse\"\000\022L\n\016ReadFlatMemory\022\032.oram_"
  "impl.ReadFlatRequest\032\034.oram_impl.FlatVec"
  "torMessage\"\000\022I\n\017WriteFlatMemory\022\034.oram_i"
  "mpl.FlatVectorMessage\032\026.google.protobuf."
  "Empty\"\000\022C\n\017CloseConnection\022\026.google.prot"
  "obuf.Empty\032\026.google.protobuf.Empty\"\000\022N\n\013"
  "KeyExchange\022\035.oram_impl.KeyExchangeReque"
  "st\032\036.oram_impl.KeyExchangeResponse\"\000\022>\n\t"
  "SendHello\022\027.oram_impl.HelloMessage\032\026.goo"
  "gle.protobuf.Empty\"\000\022K\n\027ReportServerInfo"
  "rmation\022\026.google.protobuf.Empty\032\026.google"
  ".protobuf.Empty\"\000\022\?\n\013ResetServer\022\026.googl"
  "e.protobuf.Empty\032\026.google.protobuf.Empty"
  "\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 1970, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace oram_impl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RequestHeader::_Internal {
 public:
};

RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_hash_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_hash().empty()) {
    _this->_impl_.instance_hash_.Set(from._internal_instance_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:oram_impl.RequestHeader)
}

inline void RequestHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_hash_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instance_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:oram_impl.RequestHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_hash_.Destroy();
  _impl_.version_.Destroy();
}

void RequestHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instance_hash_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes instance_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes instance_hash = 1;
  if (!this->_internal_instance_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_instance_hash(), target);
  }

  // bytes version = 2;
  if (!this->_internal_version().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.RequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes instance_hash = 1;
  if (!this->_internal_instance_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instance_hash());
  }

  // bytes version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeader::GetClassData() const { return &_class_data_; }


void RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestHeader*>(&to_msg);
  auto& from = static_cast<const RequestHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.RequestHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instance_hash().empty()) {
    _this->_internal_set_instance_hash(from._internal_instance_hash());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_hash_, lhs_arena,
      &other->_impl_.instance_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class PrintOramTreeRequest::_Internal {
 public:
};

PrintOramTreeRequest::PrintOramTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.PrintOramTreeRequest)
}
PrintOramTreeRequest::PrintOramTreeRequest(const PrintOramTreeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrintOramTreeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:oram_impl.PrintOramTreeRequest)
}

inline void PrintOramTreeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrintOramTreeRequest::~PrintOramTreeRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.PrintOramTreeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrintOramTreeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrintOramTreeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrintOramTreeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.PrintOramTreeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrintOramTreeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrintOramTreeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.PrintOramTreeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.PrintOramTreeRequest)
  return target;
}

size_t PrintOramTreeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.PrintOramTreeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrintOramTreeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrintOramTreeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrintOramTreeRequest::GetClassData() const { return &_class_data_; }


void PrintOramTreeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrintOramTreeRequest*>(&to_msg);
  auto& from = static_cast<const PrintOramTreeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.PrintOramTreeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrintOramTreeRequest::CopyFrom(const PrintOramTreeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.PrintOramTreeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintOramTreeRequest::IsInitialized() const {
  return true;
}

void PrintOramTreeRequest::InternalSwap(PrintOramTreeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintOramTreeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class HelloMessage::_Internal {
 public:
};

HelloMessage::HelloMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:oram_impl.HelloMessage)
}

inline void HelloMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:oram_impl.HelloMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.iv_.Destroy();
}

void HelloMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.HelloMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.HelloMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.HelloMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloMessage::GetClassData() const { return &_class_data_; }


void HelloMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloMessage*>(&to_msg);
  auto& from = static_cast<const HelloMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.HelloMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::InternalSwap(HelloMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class KeyExchangeRequest::_Internal {
 public:
};

KeyExchangeRequest::KeyExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.KeyExchangeRequest)
}
KeyExchangeRequest::KeyExchangeRequest(const KeyExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchangeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_client_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_client().empty()) {
    _this->_impl_.public_key_client_.Set(from._internal_public_key_client(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:oram_impl.KeyExchangeRequest)
}

inline void KeyExchangeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_client_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_client_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeRequest::~KeyExchangeRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.KeyExchangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_client_.Destroy();
}

void KeyExchangeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_client_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.KeyExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.KeyExchangeRequest)
  return target;
}

size_t KeyExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.KeyExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_client = 1;
  if (!this->_internal_public_key_client().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_client());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeRequest::GetClassData() const { return &_class_data_; }


void KeyExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchangeRequest*>(&to_msg);
  auto& from = static_cast<const KeyExchangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.KeyExchangeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_client().empty()) {
    _this->_internal_set_public_key_client(from._internal_public_key_client());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeRequest::CopyFrom(const KeyExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.KeyExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeRequest::IsInitialized() const {
  return true;
}

void KeyExchangeRequest::InternalSwap(KeyExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_client_, lhs_arena,
      &other->_impl_.public_key_client_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class KeyExchangeResponse::_Internal {
 public:
};

KeyExchangeResponse::KeyExchangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.KeyExchangeResponse)
}
KeyExchangeResponse::KeyExchangeResponse(const KeyExchangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchangeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_server_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_key_server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key_server().empty()) {
    _this->_impl_.public_key_server_.Set(from._internal_public_key_server(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:oram_impl.KeyExchangeResponse)
}

inline void KeyExchangeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_server_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchangeResponse::~KeyExchangeResponse() {
  // @@protoc_insertion_point(destructor:oram_impl.KeyExchangeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_server_.Destroy();
}

void KeyExchangeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_server_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchangeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key_server();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.KeyExchangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.KeyExchangeResponse)
  return target;
}

size_t KeyExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.KeyExchangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_server = 1;
  if (!this->_internal_public_key_server().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchangeResponse::GetClassData() const { return &_class_data_; }


void KeyExchangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchangeResponse*>(&to_msg);
  auto& from = static_cast<const KeyExchangeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.KeyExchangeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key_server().empty()) {
    _this->_internal_set_public_key_server(from._internal_public_key_server());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchangeResponse::CopyFrom(const KeyExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.KeyExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchangeResponse::IsInitialized() const {
  return true;
}

void KeyExchangeResponse::InternalSwap(KeyExchangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_server_, lhs_arena,
      &other->_impl_.public_key_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class InitFlatOramRequest::_Internal {
 public:
  static const ::oram_impl::RequestHeader& header(const InitFlatOramRequest* msg);
};

const ::oram_impl::RequestHeader&
InitFlatOramRequest::_Internal::header(const InitFlatOramRequest* msg) {
  return *msg->_impl_.header_;
}
InitFlatOramRequest::InitFlatOramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.InitFlatOramRequest)
}
InitFlatOramRequest::InitFlatOramRequest(const InitFlatOramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitFlatOramRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.block_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_size_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.block_size_));
  // @@protoc_insertion_point(copy_constructor:oram_impl.InitFlatOramRequest)
}

inline void InitFlatOramRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.capacity_){0u}
    , decltype(_impl_.block_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitFlatOramRequest::~InitFlatOramRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.InitFlatOramRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitFlatOramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void InitFlatOramRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitFlatOramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.InitFlatOramRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_size_) -
      reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.block_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitFlatOramRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 block_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitFlatOramRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.InitFlatOramRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_capacity(), target);
  }

  // uint32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.InitFlatOramRequest)
  return target;
}

size_t InitFlatOramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.InitFlatOramRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 capacity = 2;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capacity());
  }

  // uint32 block_size = 3;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitFlatOramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitFlatOramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitFlatOramRequest::GetClassData() const { return &_class_data_; }


void InitFlatOramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitFlatOramRequest*>(&to_msg);
  auto& from = static_cast<const InitFlatOramRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.InitFlatOramRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitFlatOramRequest::CopyFrom(const InitFlatOramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.InitFlatOramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitFlatOramRequest::IsInitialized() const {
  return true;
}

void InitFlatOramRequest::InternalSwap(InitFlatOramRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitFlatOramRequest, _impl_.block_size_)
      + sizeof(InitFlatOramRequest::_impl_.block_size_)
      - PROTOBUF_FIELD_OFFSET(InitFlatOramRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitFlatOramRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class FlatVectorMessage::_Internal {
 public:
  static const ::oram_impl::RequestHeader& header(const FlatVectorMessage* msg);
};

const ::oram_impl::RequestHeader&
FlatVectorMessage::_Internal::header(const FlatVectorMessage* msg) {
  return *msg->_impl_.header_;
}
FlatVectorMessage::FlatVectorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.FlatVectorMessage)
}
FlatVectorMessage::FlatVectorMessage(const FlatVectorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlatVectorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:oram_impl.FlatVectorMessage)
}

inline void FlatVectorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlatVectorMessage::~FlatVectorMessage() {
  // @@protoc_insertion_point(destructor:oram_impl.FlatVectorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlatVectorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void FlatVectorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlatVectorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.FlatVectorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatVectorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlatVectorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.FlatVectorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.FlatVectorMessage)
  return target;
}

size_t FlatVectorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.FlatVectorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlatVectorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlatVectorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlatVectorMessage::GetClassData() const { return &_class_data_; }


void FlatVectorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlatVectorMessage*>(&to_msg);
  auto& from = static_cast<const FlatVectorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.FlatVectorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlatVectorMessage::CopyFrom(const FlatVectorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.FlatVectorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatVectorMessage::IsInitialized() const {
  return true;
}

void FlatVectorMessage::InternalSwap(FlatVectorMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatVectorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class InitTreeOramRequest::_Internal {
 public:
  static const ::oram_impl::RequestHeader& header(const InitTreeOramRequest* msg);
};

const ::oram_impl::RequestHeader&
InitTreeOramRequest::_Internal::header(const InitTreeOramRequest* msg) {
  return *msg->_impl_.header_;
}
InitTreeOramRequest::InitTreeOramRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.InitTreeOramRequest)
}
InitTreeOramRequest::InitTreeOramRequest(const InitTreeOramRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitTreeOramRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.bucket_size_){}
    , decltype(_impl_.bucket_num_){}
    , decltype(_impl_.block_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.bucket_size_, &from._impl_.bucket_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_size_) -
    reinterpret_cast<char*>(&_impl_.bucket_size_)) + sizeof(_impl_.block_size_));
  // @@protoc_insertion_point(copy_constructor:oram_impl.InitTreeOramRequest)
}

inline void InitTreeOramRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.bucket_size_){0u}
    , decltype(_impl_.bucket_num_){0u}
    , decltype(_impl_.block_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitTreeOramRequest::~InitTreeOramRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.InitTreeOramRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitTreeOramRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void InitTreeOramRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitTreeOramRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.InitTreeOramRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.bucket_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_size_) -
      reinterpret_cast<char*>(&_impl_.bucket_size_)) + sizeof(_impl_.block_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitTreeOramRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bucket_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bucket_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bucket_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bucket_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 block_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitTreeOramRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.InitTreeOramRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 bucket_size = 2;
  if (this->_internal_bucket_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bucket_size(), target);
  }

  // uint32 bucket_num = 3;
  if (this->_internal_bucket_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bucket_num(), target);
  }

  // uint32 block_size = 4;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.InitTreeOramRequest)
  return target;
}

size_t InitTreeOramRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.InitTreeOramRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 bucket_size = 2;
  if (this->_internal_bucket_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_size());
  }

  // uint32 bucket_num = 3;
  if (this->_internal_bucket_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bucket_num());
  }

  // uint32 block_size = 4;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitTreeOramRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitTreeOramRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitTreeOramRequest::GetClassData() const { return &_class_data_; }


void InitTreeOramRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitTreeOramRequest*>(&to_msg);
  auto& from = static_cast<const InitTreeOramRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.InitTreeOramRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_bucket_size() != 0) {
    _this->_internal_set_bucket_size(from._internal_bucket_size());
  }
  if (from._internal_bucket_num() != 0) {
    _this->_internal_set_bucket_num(from._internal_bucket_num());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitTreeOramRequest::CopyFrom(const InitTreeOramRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.InitTreeOramRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitTreeOramRequest::IsInitialized() const {
  return true;
}

void InitTreeOramRequest::InternalSwap(InitTreeOramRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitTreeOramRequest, _impl_.block_size_)
      + sizeof(InitTreeOramRequest::_impl_.block_size_)
      - PROTOBUF_FIELD_OFFSET(InitTreeOramRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitTreeOramRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class ReadFlatRequest::_Internal {
 public:
  static const ::oram_impl::RequestHeader& header(const ReadFlatRequest* msg);
};

const ::oram_impl::RequestHeader&
ReadFlatRequest::_Internal::header(const ReadFlatRequest* msg) {
  return *msg->_impl_.header_;
}
ReadFlatRequest::ReadFlatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.ReadFlatRequest)
}
ReadFlatRequest::ReadFlatRequest(const ReadFlatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadFlatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:oram_impl.ReadFlatRequest)
}

inline void ReadFlatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadFlatRequest::~ReadFlatRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.ReadFlatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadFlatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ReadFlatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadFlatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.ReadFlatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadFlatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadFlatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.ReadFlatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.ReadFlatRequest)
  return target;
}

size_t ReadFlatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.ReadFlatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadFlatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadFlatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadFlatRequest::GetClassData() const { return &_class_data_; }


void ReadFlatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadFlatRequest*>(&to_msg);
  auto& from = static_cast<const ReadFlatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.ReadFlatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadFlatRequest::CopyFrom(const ReadFlatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.ReadFlatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFlatRequest::IsInitialized() const {
  return true;
}

void ReadFlatRequest::InternalSwap(ReadFlatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFlatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// ===================================================================

class ReadPathRequest::_Internal {
 public:
  static const ::oram_impl::RequestHeader& header(const ReadPathRequest* msg);
};

const ::oram_impl::RequestHeader&
ReadPathRequest::_Internal::header(const ReadPathRequest* msg) {
  return *msg->_impl_.header_;
}
ReadPathRequest::ReadPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.ReadPathRequest)
}
ReadPathRequest::ReadPathRequest(const ReadPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadPathRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.path_, &from._impl_.path_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.path_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:oram_impl.ReadPathRequest)
}

inline void ReadPathRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadPathRequest::~ReadPathRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.ReadPathRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadPathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ReadPathRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.ReadPathRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.path_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadPathRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadPathRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.ReadPathRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.ReadPathRequest)
  return target;
}

size_t ReadPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.ReadPathRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadPathRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadPathRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadPathRequest::GetClassData() const { return &_class_data_; }


void ReadPathRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadPathRequest*>(&to_msg);
  auto& from = static_cast<const ReadPathRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.ReadPathRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_path() != 0) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadPathRequest::CopyFrom(const ReadPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.ReadPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPathRequest::IsInitialized() const {
  return true;
}

void ReadPathRequest::InternalSwap(ReadPathRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadPathRequest, _impl_.level_)
      + sizeof(ReadPathRequest::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(ReadPathRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadPathRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}

// ===================================================================

class ReadPathResponse::_Internal {
 public:
};

ReadPathResponse::ReadPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.ReadPathResponse)
}
ReadPathResponse::ReadPathResponse(const ReadPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadPathResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){from._impl_.bucket_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:oram_impl.ReadPathResponse)
}

inline void ReadPathResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadPathResponse::~ReadPathResponse() {
  // @@protoc_insertion_point(destructor:oram_impl.ReadPathResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadPathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.~RepeatedPtrField();
}

void ReadPathResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.ReadPathResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadPathResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes bucket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bucket();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadPathResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.ReadPathResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes bucket = 1;
  for (int i = 0, n = this->_internal_bucket_size(); i < n; i++) {
    const auto& s = this->_internal_bucket(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.ReadPathResponse)
  return target;
}

size_t ReadPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.ReadPathResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bucket = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bucket_.size());
  for (int i = 0, n = _impl_.bucket_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.bucket_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadPathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadPathResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadPathResponse::GetClassData() const { return &_class_data_; }


void ReadPathResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadPathResponse*>(&to_msg);
  auto& from = static_cast<const ReadPathResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.ReadPathResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bucket_.MergeFrom(from._impl_.bucket_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadPathResponse::CopyFrom(const ReadPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.ReadPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPathResponse::IsInitialized() const {
  return true;
}

void ReadPathResponse::InternalSwap(ReadPathResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadPathResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}

// ===================================================================

class WritePathRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WritePathRequest>()._impl_._has_bits_);
  static const ::oram_impl::RequestHeader& header(const WritePathRequest* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::oram_impl::RequestHeader&
WritePathRequest::_Internal::header(const WritePathRequest* msg) {
  return *msg->_impl_.header_;
}
WritePathRequest::WritePathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:oram_impl.WritePathRequest)
}
WritePathRequest::WritePathRequest(const WritePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WritePathRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){from._impl_.bucket_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::oram_impl::RequestHeader(*from._impl_.header_);
  }
  ::memcpy(&_impl_.path_, &from._impl_.path_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.path_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:oram_impl.WritePathRequest)
}

inline void WritePathRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bucket_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.path_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.offset_){0u}
  };
}

WritePathRequest::~WritePathRequest() {
  // @@protoc_insertion_point(destructor:oram_impl.WritePathRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WritePathRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void WritePathRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WritePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oram_impl.WritePathRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  ::memset(&_impl_.path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.path_)) + sizeof(_impl_.level_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WritePathRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .oram_impl.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bucket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bucket();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .oram_impl.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::oram_impl::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WritePathRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oram_impl.WritePathRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated bytes bucket = 4;
  for (int i = 0, n = this->_internal_bucket_size(); i < n; i++) {
    const auto& s = this->_internal_bucket(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .oram_impl.Type type = 5;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // optional uint32 offset = 6;
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oram_impl.WritePathRequest)
  return target;
}

size_t WritePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oram_impl.WritePathRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes bucket = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bucket_.size());
  for (int i = 0, n = _impl_.bucket_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.bucket_.Get(i));
  }

  // .oram_impl.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // uint32 path = 2;
  if (this->_internal_path() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .oram_impl.Type type = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 offset = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WritePathRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WritePathRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WritePathRequest::GetClassData() const { return &_class_data_; }


void WritePathRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WritePathRequest*>(&to_msg);
  auto& from = static_cast<const WritePathRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:oram_impl.WritePathRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bucket_.MergeFrom(from._impl_.bucket_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::oram_impl::RequestHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_path() != 0) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WritePathRequest::CopyFrom(const WritePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oram_impl.WritePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WritePathRequest::IsInitialized() const {
  return true;
}

void WritePathRequest::InternalSwap(WritePathRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WritePathRequest, _impl_.offset_)
      + sizeof(WritePathRequest::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(WritePathRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WritePathRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[11]);
}

// ===================================================================

class WritePathResponse::_Internal {
 public:
};

WritePathResponse::WritePathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:oram_impl.WritePathResponse)
}
WritePathResponse::WritePathResponse(const WritePathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  WritePathResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:oram_impl.WritePathResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WritePathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WritePathResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WritePathResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oram_impl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oram_impl::RequestHeader*
Arena::CreateMaybeMessage< ::oram_impl::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::PrintOramTreeRequest*
Arena::CreateMaybeMessage< ::oram_impl::PrintOramTreeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::PrintOramTreeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::HelloMessage*
Arena::CreateMaybeMessage< ::oram_impl::HelloMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::HelloMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::KeyExchangeRequest*
Arena::CreateMaybeMessage< ::oram_impl::KeyExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::KeyExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::KeyExchangeResponse*
Arena::CreateMaybeMessage< ::oram_impl::KeyExchangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::KeyExchangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::InitFlatOramRequest*
Arena::CreateMaybeMessage< ::oram_impl::InitFlatOramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::InitFlatOramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::FlatVectorMessage*
Arena::CreateMaybeMessage< ::oram_impl::FlatVectorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::FlatVectorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::InitTreeOramRequest*
Arena::CreateMaybeMessage< ::oram_impl::InitTreeOramRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::InitTreeOramRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::ReadFlatRequest*
Arena::CreateMaybeMessage< ::oram_impl::ReadFlatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::ReadFlatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::ReadPathRequest*
Arena::CreateMaybeMessage< ::oram_impl::ReadPathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::ReadPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::ReadPathResponse*
Arena::CreateMaybeMessage< ::oram_impl::ReadPathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::ReadPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::WritePathRequest*
Arena::CreateMaybeMessage< ::oram_impl::WritePathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::WritePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oram_impl::WritePathResponse*
Arena::CreateMaybeMessage< ::oram_impl::WritePathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oram_impl::WritePathResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
